/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var d=BigInt(0),w=BigInt(1);function h(t){return t instanceof Uint8Array||ArrayBuffer.isView(t)&&t.constructor.name==="Uint8Array"}function b(t){if(!h(t))throw new Error("Uint8Array expected")}function k(t,r){if(typeof r!="boolean")throw new Error(t+" boolean expected, got "+r)}function F(t){const r=t.toString(16);return r.length&1?"0"+r:r}function A(t){if(typeof t!="string")throw new Error("hex string expected, got "+typeof t);return t===""?d:BigInt("0x"+t)}var E=typeof Uint8Array.from([]).toHex=="function"&&typeof Uint8Array.fromHex=="function",S=Array.from({length:256},(t,r)=>r.toString(16).padStart(2,"0"));function U(t){if(b(t),E)return t.toHex();let r="";for(let e=0;e<t.length;e++)r+=S[t[e]];return r}var a={_0:48,_9:57,A:65,F:70,a:97,f:102};function m(t){if(t>=a._0&&t<=a._9)return t-a._0;if(t>=a.A&&t<=a.F)return t-(a.A-10);if(t>=a.a&&t<=a.f)return t-(a.a-10)}function x(t){if(typeof t!="string")throw new Error("hex string expected, got "+typeof t);if(E)return Uint8Array.fromHex(t);const r=t.length,e=r/2;if(r%2)throw new Error("hex string expected, got unpadded hex of length "+r);const n=new Uint8Array(e);for(let o=0,i=0;o<e;o++,i+=2){const c=m(t.charCodeAt(i)),f=m(t.charCodeAt(i+1));if(c===void 0||f===void 0){const u=t[i]+t[i+1];throw new Error('hex string expected, got non-hex character "'+u+'" at index '+i)}n[o]=c*16+f}return n}function O(t){return A(U(t))}function V(t){return b(t),A(U(Uint8Array.from(t).reverse()))}function T(t,r){return x(t.toString(16).padStart(r*2,"0"))}function C(t,r){return T(t,r).reverse()}function M(t,r,e){let n;if(typeof r=="string")try{n=x(r)}catch(i){throw new Error(t+" must be hex string or Uint8Array, cause: "+i)}else if(h(r))n=Uint8Array.from(r);else throw new Error(t+" must be hex string or Uint8Array");const o=n.length;if(typeof e=="number"&&o!==e)throw new Error(t+" of length "+e+" expected, got "+o);return n}function _(...t){let r=0;for(let n=0;n<t.length;n++){const o=t[n];b(o),r+=o.length}const e=new Uint8Array(r);for(let n=0,o=0;n<t.length;n++){const i=t[n];e.set(i,o),o+=i.length}return e}var y=t=>typeof t=="bigint"&&d<=t;function H(t,r,e){return y(t)&&y(r)&&y(e)&&r<=t&&t<e}function R(t,r,e,n){if(!H(r,e,n))throw new Error("expected valid "+t+": "+e+" <= n < "+n+", got "+r)}function j(t){let r;for(r=0;t>d;t>>=w,r+=1);return r}const z=t=>(w<<BigInt(t))-w;var p=t=>new Uint8Array(t),v=t=>Uint8Array.from(t);function D(t,r,e){if(typeof t!="number"||t<2)throw new Error("hashLen must be a number");if(typeof r!="number"||r<2)throw new Error("qByteLen must be a number");if(typeof e!="function")throw new Error("hmacFn must be a function");let n=p(t),o=p(t),i=0;const c=()=>{n.fill(1),o.fill(0),i=0},f=(...s)=>e(o,n,...s),u=(s=p(0))=>{o=f(v([0]),s),n=f(),s.length!==0&&(o=f(v([1]),s),n=f())},B=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let s=0;const l=[];for(;s<r;){n=f();const g=n.slice();l.push(g),s+=n.length}return _(...l)};return(s,l)=>{c(),u(s);let g;for(;!(g=l(B()));)u();return c(),g}}var I={bigint:t=>typeof t=="bigint",function:t=>typeof t=="function",boolean:t=>typeof t=="boolean",string:t=>typeof t=="string",stringOrUint8Array:t=>typeof t=="string"||h(t),isSafeInteger:t=>Number.isSafeInteger(t),array:t=>Array.isArray(t),field:(t,r)=>r.Fp.isValid(t),hash:t=>typeof t=="function"&&Number.isSafeInteger(t.outputLen)};function P(t,r,e={}){const n=(o,i,c)=>{const f=I[i];if(typeof f!="function")throw new Error("invalid validator function");const u=t[o];if(!(c&&u===void 0)&&!f(u,t))throw new Error("param "+String(o)+" is invalid. Expected "+i+", got "+u)};for(const[o,i]of Object.entries(r))n(o,i,!1);for(const[o,i]of Object.entries(e))n(o,i,!0);return t}function W(t){const r=new WeakMap;return(e,...n)=>{const o=r.get(e);if(o!==void 0)return o;const i=t(e,...n);return r.set(e,i),i}}export{F as _,U as a,_ as c,x as d,H as f,C as g,T as h,z as i,D as l,W as m,k as n,O as o,h as p,j as r,V as s,R as t,M as u,P as v};
